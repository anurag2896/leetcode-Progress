class Solution {
public:
    bool isBipartite(vector<vector<int>>& graph) {
        int v=graph.size(), f;
        vector<int> color(v+1, 0);
        queue<int> q;
        for(int i=0; i<v; i++) {
            if(color[i]==0) {
                // if(!helperDFS(i, graph, color)) {
                //     return false;
                // }
                
                color[i]=1;
                for(q.push(i); !q.empty(); q.pop()) {
                    cout<<"printing val of i "<<i<<endl;
                    f=q.front();
                    cout<<"printing val of f "<<f<<endl;
                    for(auto it:graph[f]) {
                        if(color[it]==0) {
                            color[it] = color[f]==1 ? -1 : 1;
                            q.push(it);
                        } else if(color[it]==color[f])
                            return false;
                    }
                }
            }
        }
        return true;
    }
    
//     bool helperDFS(int s, vector<vector<int>> adj, vector<int>& color) {
//         if(color[s]==0)
//             color[s]=1;
        
//         for(auto it:adj[s]) {
//             if(color[it]==0) {
//                 color[it] = color[s]==1 ? -1 : 1;
//                 if(!helperDFS(it, adj, color))
//                     return false;
//             }
//             else {
//                 if(color[it]==color[s])
//                     return false;
//             }
//         }
//         return true;
//     }
    
};
